!function($){function Error(e,r){this.name=e,this.message=r}$.extend({mediaQuery:function(){function verifyChar(e){if(acceptedCharacters.comparison[e]||acceptedCharacters.logic[e]||acceptedCharacters.value[e]||acceptedCharacters.space[e])return!0;throw new Error("Verify character failed","The passed string contains an invalid character. Received: "+ch)}function nextChar(e,r){var n=e.charAt(r);try{verifyChar(n)}catch(a){return}return n}function stringParse(e){for(var r="",n=0;n<e.length;){var a=nextChar(e,n);if(n++,e.indexOf("(")>=0&&e.indexOf(")")<0)try{throw new Error("Syntax Error","A close parenthesis is missing")}catch(t){return}else if(e.indexOf("(")>-1||e.indexOf(")")>-1)if("("===acceptedCharacters.logic[a]){var i=stringParse(e.slice(n));r+=i.parsedUnit,n+=i.indexesToSkip+1}else{if(")"===acceptedCharacters.logic[a]){var o={parsedUnit:scopeParse(r),indexesToSkip:r.length};return o}r+=a}else r+=a}var s=scopeParse(r);try{if("undefined"==typeof s)throw new Error("Syntax Error","One of the expressions returned undefined, meaning there is a syntax error")}catch(t){return}return s}function scopeParse(e){try{if(e.indexOf("undefined")>-1)throw new Error("Syntax Error","An unacceptable character was passed that became undefined")}catch(r){return}for(var n={value:[],comparison:[],logic:[]},a=0,t=0,i=0;i<e.length;){var o=nextChar(e,i);i++,acceptedCharacters.logic[o]&&1>a?(n.logic[t]=o,a++):acceptedCharacters.logic[o]&&1===a&&(n.logic[t]+=o,t++,a=0),acceptedCharacters.comparison[o]&&void 0===n.comparison[t]?n.comparison[t]=o:acceptedCharacters.comparison[o]&&(n.comparison[t]+=o),acceptedCharacters.value[o]&&void 0===n.value[t]?n.value[t]=o:acceptedCharacters.value[o]&&(n.value[t]+=o)}return logicParse(n)}function logicParse(unit){for(var evalResults=[],evalFinalResult=!0,i=0;i<(0===unit.logic.length?1:unit.logic.length);){try{if(0===unit.logic.length)evalResults.push(eval(unit.comparison[i],unit.value[i]));else if("&&"===unit.logic[i])evalResults.push(eval(unit.comparison[i],unit.value[i])&&eval(unit.comparison[i+1],unit.value[i+1]));else if("||"===unit.logic[i])evalResults.push(eval(unit.comparison[i],unit.value[i])||eval(unit.comparison[i+1],unit.value[i+1]));else if(unit.logic.length<unit.value.length-1)throw new Error("Logic Error","Too few logic operators found -- please check your syntax. Number of logic operators: "+unit.logic.length+" vs number of values: "+unit.value.length+". logic.length should always be === to (value.length - 1)")}catch(e){return}i++}return evalResults.forEach(function(e){e===!1||"false"===e?evalFinalResult=!1:void 0===e&&(evalFinalResult=void 0)}),evalFinalResult}function eval(e,r){var n;try{if("true"!==r&&"false"!==r)switch(e){case"<":n=window.innerWidth<r;break;case">":n=window.innerWidth>r;break;case">=":n=window.innerWidth>=r;break;case"<=":n=window.innerWidth<=r;break;case"=":n=window.innerWidth===parseInt(r);break;default:if("true"!==r&&"false"!==r&&"undefined"==typeof e)throw new Error("Syntax Error","Missing comparison operator.");if("true"!==r&&"false"!==r)throw new Error("Syntax Error","Incorrect comparison operator. Received: "+e)}else if("true"===r)n=!0;else{if("false"!==r)throw new Error("Data Type Error","Expected number or true or false in eval function, instead received "+r);n=!1}}catch(a){return}return n}var stringToParse,acceptedCharacters={comparison:{"<":"<",">":">","=":"="},logic:{"&":"&","|":"|","(":"(",")":")"},value:{0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",t:"t",r:"r",u:"u",e:"e",f:"f",a:"a",l:"l",s:"s"},space:{" ":" "}},args=Array.prototype.slice.call(arguments);try{if("string"!=typeof args[0])throw new Error("Data Type Error",'Please only pass one string argument with an optional boolean to include the raw and evaluated data instead. Queries can be chained by including them in one string separated by the && operator, e.g. ">768 && <1024"');if("string"==typeof args[0]&&"boolean"!=typeof args[1]&&"undefined"!=typeof args[1])throw new Error("Data Type Error","The second argument must be a boolean, which will determine whether the method returns the raw and evaluated data instead.");if(args.length>2)throw new Error("Too Many Aguments",'Please only pass one string argument with an optional boolean to include the raw and evaluated data instead. Queries can be chained by including them in one string separated by logic operators, e.g. "(>768 && <1024) || (<320 && >1600)"')}catch(e){return}return stringParse(args[0])}}),$.fn.mediaQuery=function(e,r,n,a){function t(t,i){$.mediaQuery(e)?void 0===a||a?s&&(r(t),s=!1):a||r(t):$.mediaQuery(e)||(void 0===a||a?(s=!i,s||"function"!=typeof n||(n(t),s=!0)):a||"function"!=typeof n||n(t))}var i={firstArg:["string"],secondArg:["function"],thirdArg:["function","boolean","undefined"],fourthArg:["boolean","undefined"]};try{if(i.firstArg.indexOf(typeof e)<0||i.secondArg.indexOf(typeof r)<0)throw new Error("Data Type Error","Expected first and second arguments to be a string and function, respectively, and instead received a(n) "+typeof arguments[0]+" and "+typeof arguments[1]);if(i.thirdArg.indexOf(typeof n)<0)throw new Error("Data Type Error","Expected optional third argument to be a function, boolean, or undefined, and intead received a(n) "+typeof arguments[2]);if(i.fourthArg.indexOf(typeof a)<0)throw new Error("Data Type Error","Expected optional fourth and final argument to be a boolean or undefined, and instead received a(n) "+typeof arguments[3]);if(arguments.length>4)throw new Error("Too many arguments","Please only pass up to four arguments with the following data types: string, function[, function||boolean[, boolean]]. Instead received "+arguments.length+" arguments.")}catch(o){return}"boolean"==typeof n&&(a=n);var s=!0,c=this;"complete"===document.readyState&&t($(c),!0),$(document).on("ready",function(){t($(c),!0)}),$(window).on("resize",function(){t($(c))})}}(jQuery);