!function(e){e.extend({mediaQuery:function(){function e(e,n){throw{name:e,message:n}}function n(n){return c.comparison[n]||c.logic[n]||c.value[n]||c.space[n]?!0:void e("Parse Error","Expected number or comparison or logic operator, and instead received: "+n)}function o(e,o){var r=e.charAt(o);try{n(r)}catch(a){return void void 0}return r}function r(n){for(var i="",t=0;t<n.length;){var s=o(n,t);if(t++,n.indexOf("(")>-1||n.indexOf(")")>-1)if("("===c.logic[s]){var l=r(n.slice(t));i+=l.parsedUnit,t+=l.indexesToSkip+1}else{if(")"===c.logic[s]){var u={parsedUnit:a(i),indexesToSkip:i.length};return u}i+=s}else if(n.indexOf("(")<0&&n.indexOf(")")>-1||n.indexOf("(")>-1&&n.indexOf(")")<0)try{}catch(d){e("Syntax Error","Expected both opening and closing parentheses but only found one")}else i+=s}return void 0,a(i)}function a(e){for(var n=new d,r=0,a=0,t=0;t<e.length;){var s=o(e,t);t++,c.logic[s]&&1>r?(n.logic[a]=s,r++):c.logic[s]&&1===r&&(n.logic[a]+=s,a++,r=0),c.comparison[s]&&void 0===n.comparison[a]?n.comparison[a]=s:c.comparison[s]&&(n.comparison[a]+=s),c.value[s]&&void 0===n.value[a]?n.value[a]=s:c.value[s]&&(n.value[a]+=s)}return i(n)}function i(e){for(var n=[],o=0;o<e.value.length;)0===e.logic.length?n.push(t(e.comparison[o],e.value[o])):"&&"===e.logic[o]?(n.push(t(e.comparison[o],e.value[o])&&t(e.comparison[o+1],e.value[o+1])),o++):"||"===e.logic[o]&&(n.push(t(e.comparison[o],e.value[o])||t(e.comparison[o+1],e.value[o+1])),o++),o++;var r=!0;return n.forEach(function(e){e===!1&&(r=!1)}),r}function t(n,o){var r;if("true"!==o&&"false"!==o)switch(n){case"<":r=window.innerWidth<o?!0:!1;break;case">":r=window.innerWidth>o?!0:!1;break;case">=":r=window.innerWidth>=o?!0:!1;break;case"<=":r=window.innerWidth<=o?!0:!1;break;case"=":r=window.innerWidth===parseInt(o)?!0:!1;break;default:try{"true"!==o&&"false"!==o&&"undefined"==typeof n?e("Syntax Error","Missing comparison operator."):"true"!==o&&"false"!==o&&e("Syntax Error","Incorrect comparison operator. Received: "+n)}catch(a){void 0}}else"true"===o||"false"===o?r=o:e("Data type error","number or true or false in eval function, instead received "+o);return r}function s(){return r(l[0])}var c={comparison:{"<":"<",">":">","=":"="},logic:{"&":"&","|":"|","(":"(",")":")"},value:{0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",t:"t",r:"r",u:"u",e:"e",f:"f",a:"a",l:"l",s:"s"},space:{" ":" "}},l=Array.prototype.slice.call(arguments);try{"string"!=typeof l[0]?(void 0,e("Data Type Error",'Please only pass one string argument with an optional boolean to include the raw and evaluated data instead. Queries can be chained by including them in one string separated by the && operator, e.g. ">768 && <1024"')):"string"==typeof l[0]&&"boolean"!=typeof l[1]&&"undefined"!=typeof l[1]?(void 0,e("Data Type Error","The second argument must be a boolean, which will determine whether the method returns the raw and evaluated data instead.")):l.length>2&&e("Too Many Aguments",'Please only pass one string argument with an optional boolean to include the raw and evaluated data instead. Queries can be chained by including them in one string separated by logic operators, e.g. "(>768 && <1024) || (<320 && >1600)"')}catch(u){return void void 0}var d=function(){this.value=[],this.comparison=[],this.logic=[]};return s()}})}(jQuery),function(e){e.fn.mediaQuery=function(){}}(jQuery);